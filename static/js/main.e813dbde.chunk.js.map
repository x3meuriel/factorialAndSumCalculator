{"version":3,"sources":["components/navigation/navigation.jsx","components/Factorial/factorial.jsx","components/Insert/insert.jsx","components/Sum/sum.jsx","App.js","serviceWorker.js","index.js"],"names":["Navigation","props","className","date","Factorial","id","int","factorial","Insert","onChange","changed","placeholder","type","name","maxLength","Sum","numberHandler","App","num","parseFloat","sumOfAp","myTrim","x","replace","changeNumber","event","value","target","length","isNaN","setState","number","state","today","Date","error","inputHolder","document","getElementById","warning","this","style","visibility","innerHTML","getFullYear","color","backgroundColor","padding","margin","width","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"2WAMaA,G,iBAAa,SAACC,GAEvB,OACG,8BACK,yBAAKC,UAAY,yBACb,yBAAKA,UAAY,aACb,yBAAKA,UAAU,OAEX,yBAAKA,UAAU,gBACX,uBAAGA,UAAY,mBAAf,eACiBD,EAAME,OAG3B,yBAAKD,UAAU,gBACX,uBAAGA,UAAY,2CAAf,oBCdfE,EAAY,SAACH,GACtB,OACI,6BAASI,GAAK,aAEV,yBAAKH,UAAU,gBACX,uBAAGA,UAAY,QAAf,oBACsBD,EAAMK,IAD5B,SACuCL,EAAMM,UAD7C,QCNHC,G,MAAS,SAACP,GAGnB,OAEE,6BAASI,GAAG,cACN,uBAAGH,UAAU,cACT,2BAAOO,SAAYR,EAAMS,QAAUR,UAAY,eAC/CS,YAAc,+BAAiCC,KAAK,OAAOC,KAAK,YAAYR,GAAG,cAC/ES,UAAY,UCVfC,EAAM,SAACd,GAEhB,OACI,6BAASI,GAAK,OACV,yBAAKH,UAAU,iBACX,uBAAGA,UAAY,QAAf,qBACuBD,EAAMK,IAD7B,SACwCL,EAAMe,cAD9C,QCkFDC,G,wDAlFb,aAAc,IAAD,8BACX,gBAUFV,UAAa,SAACW,GAEZ,OADAA,EAAMC,WAAWD,KACR,EAAU,EACZA,EAAM,EAAKX,UAAUW,EAAI,IAdrB,EAgBbE,QAAW,SAACF,GAEV,OADAA,EAAMC,WAAWD,KACN,EAAW,EACfA,EAAM,EAAKE,QAAQF,EAAI,IAnBnB,EAqBbG,OAAQ,SAACC,GACP,OAAOA,EAAEC,QAAQ,cAAc,KAtBpB,EAwBbC,aAAe,SAACC,GAEd,IAAIC,EAAQD,EAAME,OAAOD,MACzB,GAAc,KAAVA,GAAkBA,EAAME,QAAU,GAAkB,MAAVF,GACxCG,MAAMH,GAEV,OAAO,KAET,EAAKI,SAAS,CAACC,OAAQZ,WAAWO,MA9BlC,EAAKM,MAAQ,CAEXC,MAAO,IAAIC,KACXH,OAAQ,EACRI,MAAO,iCANE,E,iEAyCX,IAAIC,EAAcC,SAASC,eAAe,eACtCC,EAAUF,SAASC,eAAe,gBAMtC,GAFAF,EAAYV,MAAQc,KAAKnB,OAAOe,EAAYV,OAEzCU,EAAYV,MAAME,QAAQ,EAEzB,OADAW,EAAQE,MAAMC,WAAa,UACpBH,EAAQI,UAAR,qDAGTJ,EAAQE,MAAMC,WAAa,a,+BAItB,IAAD,EACkBF,KAAKR,MAAtBD,EADD,EACCA,OAAQE,EADT,EACSA,MAEf,OACE,yBAAK/B,UAAU,OAEb,kBAAC,EAAD,CAAYC,KAAQ8B,EAAMW,gBAC1B,wBAAIvC,GAAK,eAAeoC,MAAS,CAACI,MAAO,MAAMC,gBAAiB,QAC/DC,QAAS,MAAOC,OAAQ,WAAYC,MAAO,MAAOP,WAAY,aAD/D,KAGA,kBAAC,EAAD,CAAQhC,QAAW8B,KAAKhB,eACxB,yBAAKtB,UAAY,aACf,yBAAKA,UAAU,YACb,kBAAC,EAAD,CAAWI,IAAKyB,EAAQxB,UAAWiC,KAAKjC,UAAUwB,KAClD,kBAAC,EAAD,CAAKzB,IAAOyB,EAAQf,cAAiBwB,KAAKpB,QAAQD,WAAWY,a,GAxEvDmB,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrB,SAASC,eAAe,SDyHpB,kBAAmBqB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACL+B,QAAQ/B,MAAMA,EAAMgC,c","file":"static/js/main.e813dbde.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport '../navigation/navigation.css';\r\nimport '../css/bootstrap.css';\r\nimport '../css/animate.css';\r\n\r\nexport const Navigation = (props) => {\r\n\r\n    return (\r\n       <main>\r\n            <nav className = 'nav navbar navigation'>\r\n                <div className = 'container'> \r\n                    <div className=\"row\">\r\n                    \r\n                        <div className=\"col col-sm-6\">\r\n                            <p className = 'btn btn-primary'>\r\n                                We are in   {props.date }\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"col col-sm-6\">\r\n                            <p className = 'btn btn-danger animated infinite bounce' >\r\n                                More Life\r\n                            </p>\r\n                        </div> \r\n                        \r\n                    </div>\r\n                \r\n                </div>\r\n            </nav>\r\n\r\n        \r\n\r\n\r\n        </main>   \r\n       \r\n    );\r\n};\r\n\r\n","\r\nimport React from 'react';\r\nimport '../../components/css/bootstrap.css';\r\n\r\n\r\n\r\nexport const Factorial = (props) => {\r\n    return(\r\n        <section id = 'factorial'>\r\n                        \r\n            <div className=\"col col-sm-6\">\r\n                <p className = 'mine'>\r\n                    The factorial of {props.int} is  '{props.factorial }'      \r\n                </p>\r\n                \r\n            </div>\r\n        </section>\r\n    )\r\n}","import React from 'react';\r\nimport '../../components/css/bootstrap.css';\r\nimport './insert.css';\r\n\r\n\r\nexport const Insert = (props) => {\r\n  \r\n    \r\n    return(\r\n\r\n      <section id='insert_num'>\r\n            <p className=\"mine input\">\r\n                <input onChange = {props.changed}  className = 'form-control' \r\n                placeholder = 'Type numbers from 0 -   9999'   type=\"text\" name=\"changeInt\" id=\"inputHolder\"\r\n                maxLength = '4'\r\n                />\r\n            </p>\r\n       </section>\r\n\r\n    ) \r\n    \r\n\r\n}","import React from 'react';\r\nimport '../../components/css/bootstrap.css';\r\n\r\n\r\nexport const Sum = (props) => {\r\n\r\n    return(\r\n        <section id = 'sum'>\r\n            <div className=\"col col-sm-6 \">\r\n                <p className = 'mine'>\r\n                    Arithmetic Sum of {props.int} is  '{props.numberHandler  }'\r\n                </p>        \r\n            </div> \r\n       </section>\r\n    )\r\n} ","import React, { Component } from 'react';\nimport {Navigation} from './components/navigation/navigation';\nimport {Factorial}  from './components/Factorial/factorial'\nimport {Insert}  from './components/Insert/insert';\nimport {Sum}  from './components/Sum/sum';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n     // properties and methods of this.state\n      today: new Date(),\n      number: 3,\n      error: 'numbers are greater than 9999'\n    }\n  \n  }\n\n  factorial  = (num) => { // function for factorial;\n    num = parseFloat(num);\n    if (num<=0) return 1;\n    return num * this.factorial(num-1)\n  }\n  sumOfAp =  (num) => { // function for sum\n    num = parseFloat(num);\n    if (num <= 0 ) return 0;\n    return num + this.sumOfAp(num-1)\n  }\n  myTrim= (x) => {\n    return x.replace(/^\\s+|\\s+$/gm,'');\n  }\n  changeNumber = (event) => { // function for input(number) change\n    \n    let value = event.target.value\n    if((value === '') || (value.length >= 5 ) || (value === ' ')\n      || (isNaN(value))\n      ){\n      return null \n    }\n    this.setState({number: parseFloat(value)})\n    \n  }\n   \n  // componentDidMount(){\n  //   let jj = document.getElementById('changeInt');\n  // }\n\n  componentDidUpdate(){\n    let inputHolder = document.getElementById('inputHolder');\n    let warning = document.getElementById('show_warning');\n\n\n\n    inputHolder.value = this.myTrim(inputHolder.value) // trims the input field of whitespace\n    \n    if(inputHolder.value.length>=4){\n        warning.style.visibility = 'visible'\n        return warning.innerHTML = `NB: inputs field calculate for only 4 digit number`;\n    }\n    else{\n      warning.style.visibility = 'collapse'\n    }\n  }\n \n  render(){\n    const {number, today} = this.state;\n    \n    return (\n      <div className=\"App\">\n        \n        <Navigation date = {today.getFullYear()} />\n        <h4 id = 'show_warning' style = {{color: 'red',backgroundColor: 'white',\n         padding: '5px', margin: '4px auto', width: '50%', visibility: 'collapse'\n         }}> </h4> \n        <Insert changed = {this.changeNumber} />\n        <div className = 'container'>\n          <div className=\"row cont\">\n            <Factorial int={number} factorial={this.factorial(number)} /> \n            <Sum int = {number} numberHandler = {this.sumOfAp(parseFloat(number))} />\n          </div>\n        </div>\n        \n      </div>\n    );\n\n  }\n\n}\n\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}